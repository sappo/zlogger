zlog(3)
=======

NAME
----
zlog - zlog actor

SYNOPSIS
--------
----
//  Create new zlog actor instance.
//  @TODO: Describe the purpose of this actor!
//
//      zactor_t *zlog = zactor_new (zlog, NULL);
//
//  Destroy zlog instance.
//
//      zactor_destroy (&zlog);
//
//  Enable verbose logging of commands and activity:
//
//      zstr_send (zlog, "VERBOSE");
//
//  Start zlog actor.
//
//      zstr_sendx (zlog, "START", NULL);
//
//  Stop zlog actor.
//
//      zstr_sendx (zlog, "STOP", NULL);
//
//  This is the zlog constructor as a zactor_fn;
ZLOG_EXPORT void
    zlog_actor (zsock_t *pipe, void *args);

//  Compares the zvector_t's of given logMsg a to logMsg b.
//  Returns -1 if a < b, otherwiese 1
ZLOG_EXPORT int
    zlog_compare_log_msg_vc (const char *logMsg_a, const char *logMsg_b);

//  Compares the timestamps's of given logMsg a to logMsg b.
//  Returns -1 if a < b, otherwiese 1
ZLOG_EXPORT int
    zlog_compare_log_msg_ts (const char *logMsg_a, const char *logMsg_b);

//  Reads log of source filepath and orders it with given
//  pointer to compare_function into destination filepath.

ZLOG_EXPORT void
    zlog_order_log (const char *path_src, const char *path_dst, zlistx_comparator_fn *compare_function);

//  Self test of this actor
ZLOG_EXPORT void
    zlog_test (bool verbose);
----

DESCRIPTION
-----------

zlog - zlog actor

Please add @discuss section in ../src/zlog.c.

EXAMPLE
-------
.From zlog_test method
----
char *params1[3] = {"inproc://logger1", "logger1", "GOSSIP MASTER"};
zactor_t *zlog = zactor_new (zlog_actor, params1);

char *params2[3] = {"inproc://logger2", "logger2", "GOSSIP SLAVE"};
zactor_t *zlog2 = zactor_new (zlog_actor, params2);

char *params3[3] = {"inproc://logger3", "logger3", "GOSSIP SLAVE"};
zactor_t *zlog3 = zactor_new (zlog_actor, params3);

/*char *params4[3] = {"inproc://logger4", "logger4", "GOSSIP SLAVE"};*/
/*zactor_t *zlog4 = zactor_new (zlog_actor, params4);*/

if (verbose) {
    zstr_send (zlog, "VERBOSE");
    zstr_send (zlog2, "VERBOSE");
    zstr_send (zlog3, "VERBOSE");
    /*zstr_send (zlog4, "VERBOSE");*/
}

zstr_send (zlog, "START");
zstr_send (zlog2, "START");
zstr_send (zlog3, "START");
/*zstr_send (zlog4, "START");*/

//  Give time to interconnect and elect
zclock_sleep (750);

//  Give time for log collect to happen
zclock_sleep (12000);

zstr_send (zlog, "STOP");
zstr_send (zlog2, "STOP");
zstr_send (zlog3, "STOP");
/*zstr_send (zlog4, "STOP");*/

//  Give time to disconnect
zclock_sleep (250);

zactor_destroy (&zlog);
zactor_destroy (&zlog2);
zactor_destroy (&zlog3);
/*zactor_destroy (&zlog4);*/

/*zlog_order_log ("/var/log/vc.log", "ordered_vc1.log");*/
----
