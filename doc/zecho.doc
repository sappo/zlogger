#### zecho - Implements the echo algorithms

zecho - Implements the echo algorithms which consist of two distinct waves.
        The first wave is to flood the network and build a spanning tree. It
        can be used to inform peers thus it's also called inform wave. The
        second wave is flows from the leaves of the spanning tree back to the
        initiator. It it used to collect things from peers. Collectables are
        e.g. ACKs or arbitrary data.

Please add '@discuss' section in './../src/zecho.c'.

This is the class interface:

```h
    
    //  Process INFORM or COLLECT messages
    typedef void (zecho_process_fn) (
        zecho_t *self, zmsg_t *msg,  void *handler);
    //  Create custom INFORM or COLLECT messages content
    typedef zmsg_t * (zecho_create_fn) (
        zecho_t *self, void *handler);
    
    //  Create a new zecho
    ZLOG_EXPORT zecho_t *
        zecho_new (zyre_t *node);
    
    //  Destroy the zecho
    ZLOG_EXPORT void
        zecho_destroy (zecho_t **self_p);
    
    //  Initiate the echo algorithm
    ZLOG_EXPORT void
        zecho_init (zecho_t *self);
    
    //  Handle a received echo token
    ZLOG_EXPORT int
        zecho_recv (zecho_t *self, zyre_event_t *token);
    
    //  Sets a handler which is passed to custom collect functions.
    ZLOG_EXPORT void
        zecho_set_collect_handler (zecho_t *self, void *handler);
    
    //  Set a user-defined function to process collect messages from peers; This
    //  function is invoked during the second (incoming) wave.
    ZLOG_EXPORT void
        zecho_set_collect_process (zecho_t *self, zecho_process_fn *process_fn);
    
    //  Set a user-defined function to create a custom message part for the collect
    //  message; This function is invoked during the second (incoming) wave. The
    //  returned message's content is appended to the wave message.
    ZLOG_EXPORT void
        zecho_set_collect_create (zecho_t *self, zecho_create_fn *collect_fn);
    
    //  Sets a handler which is passed to custom inform functions.
    ZLOG_EXPORT void
        zecho_set_inform_handler (zecho_t *self, void *handler);
    
    //  Set a user-defined function to process inform messages from peers; This
    //  function is invoked during the first (outgoing) wave.
    ZLOG_EXPORT void
        zecho_set_inform_process (zecho_t *self, zecho_process_fn *process_fn);
    
    //  Set a user-defined function to create a custom message part for the inform
    //  message; This function is invoked during the first (outgoing) wave. The
    //  returned message's content is appended to the wave message.
    ZLOG_EXPORT void
        zecho_set_inform_create (zecho_t *self, zecho_create_fn *collect_fn);
    
    //  Set a vector clock handle. Echo messages will be prepended with the
    //  vector if not NULL.
    ZLOG_EXPORT void
        zecho_set_clock (zecho_t *self, zvector_t *clock);
    
    //  Enable/disable verbose logging.
    ZLOG_EXPORT void
        zecho_set_verbose (zecho_t *self, bool verbose);
    
    //  Self test of this class
    ZLOG_EXPORT void
        zecho_test (bool verbose);
    
```
Please add '@interface' section in './../src/zecho.c'.

This is the class self test code:

```c
    int rc;
    //  Init zyre nodes
    zyre_t *node1 = zyre_new ("node1");
    assert (node1);
    //  Set inproc endpoint for this node
    rc = zyre_set_endpoint (node1, "inproc://zyre-node1");
    assert (rc == 0);
    //  Set up gossip network for this node
    zyre_gossip_bind (node1, "inproc://gossip-hub");
    rc = zyre_start (node1);
    assert (rc == 0);
    
    zyre_t *node2 = zyre_new ("node2");
    assert (node2);
    //  Set inproc endpoint for this node
    rc = zyre_set_endpoint (node2, "inproc://zyre-node2");
    assert (rc == 0);
    //  Set up gossip network for this node
    zyre_gossip_connect (node2, "inproc://gossip-hub");
    rc = zyre_start (node2);
    assert (rc == 0);
    
    zyre_t *node3 = zyre_new ("node3");
    assert (node3);
    //  Set inproc endpoint for this node
    rc = zyre_set_endpoint (node3, "inproc://zyre-node3");
    assert (rc == 0);
    //  Set up gossip network for this node
    zyre_gossip_connect (node3, "inproc://gossip-hub");
    rc = zyre_start (node3);
    assert (rc == 0);
    
    //  Setup echo
    zecho_t *echo1 = zecho_new (node1);
    zecho_t *echo2 = zecho_new (node2);
    zecho_t *echo3 = zecho_new (node3);
    zecho_set_verbose (echo1, verbose);
    zecho_set_verbose (echo2, verbose);
    zecho_set_verbose (echo3, verbose);
    zecho_set_collect_process (echo1, s_test_zecho_process);
    zecho_set_collect_process (echo2, s_test_zecho_process);
    zecho_set_collect_process (echo3, s_test_zecho_process);
    zecho_set_collect_create (echo1, s_test_zecho_create);
    zecho_set_collect_create (echo2, s_test_zecho_create);
    zecho_set_collect_create (echo3, s_test_zecho_create);
    
    //  Join topology
    zyre_join (node1, "GLOBAL");
    zyre_join (node2, "GLOBAL");
    zyre_join (node2, "LOCAL");
    zyre_join (node3, "LOCAL");
    
    //  Give time for them to interconnect
    zclock_sleep (500);
    
    if (verbose) {
        zyre_dump (node1);
        zclock_sleep (50);
        zyre_dump (node2);
        zclock_sleep (50);
        zyre_dump (node3);
        zclock_sleep (50);
    }
    
    zecho_init (echo1);
    
    zyre_event_t *event = NULL;
    
    do {
        event = zyre_event_new (node2);
        if (!streq (zyre_event_type (event), "WHISPER"))
            zyre_event_destroy (&event);
        else
            break;
    } while (1);
    char *type = zmsg_popstr (zyre_event_msg (event));
    assert (streq (type, "ZECHO"));
    zstr_free (&type);
    zecho_recv (echo2, event);
    
    do {
        event = zyre_event_new (node3);
        if (!streq (zyre_event_type (event), "WHISPER"))
            zyre_event_destroy (&event);
        else
            break;
    } while (1);
    type = zmsg_popstr (zyre_event_msg (event));
    assert (streq (type, "ZECHO"));
    zstr_free (&type);
    zecho_recv (echo3, event);
    
    do {
        event = zyre_event_new (node2);
        if (!streq (zyre_event_type (event), "WHISPER"))
            zyre_event_destroy (&event);
        else
            break;
    } while (1);
    type = zmsg_popstr (zyre_event_msg (event));
    assert (streq (type, "ZECHO"));
    zstr_free (&type);
    zecho_recv (echo2, event);
    
    do {
        event = zyre_event_new (node1);
        if (!streq (zyre_event_type (event), "WHISPER"))
            zyre_event_destroy (&event);
        else
            break;
    } while (1);
    type = zmsg_popstr (zyre_event_msg (event));
    assert (streq (type, "ZECHO"));
    zstr_free (&type);
    zecho_recv (echo1, event);
    
    if (verbose) {
        // Print result
        zecho_print (echo1);
        zecho_print (echo2);
        zecho_print (echo3);
    }
    
    //  Cleanup
    zecho_destroy (&echo1);
    zecho_destroy (&echo2);
    zecho_destroy (&echo3);
    
    zyre_stop (node1);
    zyre_stop (node2);
    zyre_stop (node3);
    
    zyre_destroy (&node1);
    zyre_destroy (&node2);
    zyre_destroy (&node3);
    
```

